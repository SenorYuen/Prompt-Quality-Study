a. Understand the Overall Purpose:
    - The CombinationCalculator is a class that provides methods to calculate the number of combinations for a specific count, calculate all possible combinations, and generate combinations with a specified number of elements.
b. Identify the Required Methods:  
    - To ensure the function of this class, it will need all of these methods:
        - Initialize the calculator with a list of data (__init__)
        - Calculate the number of combinations (count)
        - Calculate the number of all possible combinations (count_all)
        - Generate combinations with a specified number of elements (select)
        - Generate all possible combinations (select_all)
        - Generate combinations with a specified number of elements by recursion (_select)
c. Detail each method:
    -  __init__(self, datas: List[str]):
        - This method will act as the constructor. 
        - This method will Initialize the calculator with a list of data.
        - self.datas = datas
    - @staticmethod count(n: int, m: int) -> int:
        - This method will Calculate the number of combinations for a specific count.
        - This method will get "n" as int which is the total number of elements,"m" as int which is the number of elements in each combination.
        - This method will return The number of combinations as int.
        - Example Usage:
        - >>> CombinationCalculator.count(4, 2)
        - >>> The expected return value for example usage is : 6  
    - @staticmethod count_all(n: int) -> int:
        - This method will Calculate the number of all combinations.
        - This method will get "n" as int which is the total number of elements.
        - This method will return The number of all possible combinations,int,if the number of combinations is greater than 2^63-1,return float("inf").
        - Example Usage:
        - >>> CombinationCalculator.count_all(4)
        - >>> The expected return value for example usage is : 15    
    - select(self, m: int) -> List[List[str]]:
        - This method will Generate combinations with a specified number of elements.
        - This method will get "m" as int which is the number of elements in each combination.
        - This method will return A list of combinations as List[List[str]].
        - Example Usage:
        - >>> calc = CombinationCalculator(["A", "B", "C", "D"])
        - >>> calc.select(2)
        - >>> The expected return value for example usage is : [['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D']]
    - select_all(self) -> List[List[str]]:
        - This method will Generate all possible combinations of  selecting elements from the given data list,and it uses the select method.
        - This method will return A list of combinations as List[List[str]].
        - Example Usage:
        - >>> calc = CombinationCalculator(["A", "B", "C", "D"])
        - >>> calc.select_all()  
        - >>> The expected return value for example usage is : [['A'], ['B'], ['C'], ['D'], ['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D'], ['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'C', 'D'], ['B', 'C', 'D'], ['A', 'B', 'C', 'D']].
    -  _select(self, dataIndex: int, resultList: List[str], resultIndex: int, result: List[List[str]]):
        - This method will Generate combinations with a specified number of elements by recursion.
        - This method will get "dataIndex" as int which is The index of the data to be selected, "resultList" as List[str] which is The list of elements in the combination, "resultIndex" as int which is The index of the element in the combination, "result" as List[List[str]] which is The list of combinations.
        - This method will return None.
        - Example Usage:
        - >>> calc = CombinationCalculator(["A", "B", "C", "D"])
        - >>> result = []
        - >>> calc._select(0, [None] * 2, 0, result)
        - >>> result
        - >>> The expected return value for example usage is :  [['A', 'B'], ['A', 'C'], ['A', 'D'], ['B', 'C'], ['B', 'D'], ['C', 'D']]
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import math
    - from typing import List
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 
