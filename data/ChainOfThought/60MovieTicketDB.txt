a. Understand the Overall Purpose:
    - The MovieTicketDB is a class that supports movie database operations, which allows for inserting movie information, searching for movie information by name, and deleting movie information by name.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initializes the MovieTicketDB object with the database name (__init__)
        - Creates a "tickets" table in the database (create_table)
        - Inserts a new ticket into the "tickets" table (insert_ticket)
        - Searches for tickets in the "tickets" table (search_tickets_by_customer)
        - Deletes a ticket from the "tickets" table  (delete_ticket)
c. Detail each method:
    - __init__(self, db_name):
        - This method will act as the constructor.
        - This method will Initialize the MovieTicketDB object with the specified database name.
        - This Method will get "db_name" as str which is the name of the SQLite database.
        - self.connection = sqlite3.connect(db_name)
        - self.cursor = self.connection.cursor()
        - self.create_table()
    - def create_table(self):
        - Creates a "tickets" table in the database if it does not exist already. Fields include ID of type int, movie name of type str, theater name of type str, seat number of type str, and customer name of type str. 
        - This method will return None.  
    - insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        - This method will Insert a new ticket into the "tickets" table.
        - This method will get "movie_name" as str which is the name of the movie, "theater_name" as str which is the name of the theater, "seat_number" as str which is the seat number, "customer_name" as str which is the name of the customer.
        - This method will return nothing.
    - search_tickets_by_customer(self, customer_name):
        - This method will Search for tickets in the "tickets" table by customer name.
        - This method will get "customer_name" as str which is the name of the customer.
        - This method will return a list of tuples, the rows from the "tickets" table that match the search criteria.
        - Example Usage:
        -  ticket_db = MovieTicketDB("ticket_database.db")
        - >>> ticket_db.create_table()
        - >>> ticket_db.insert_ticket("Movie A", "Theater 1", "A1", "John Doe")
        - >>> result = ticket_db.search_tickets_by_customer("John Doe")
        - >>> The expected output value for example usage is : len(result) = 1
    - delete_ticket(self, ticket_id):
        - This method will delete a ticket from the "tickets" table by ticket ID.
        - This method will get "ticket_id" as int which is the ID of the ticket to delete.
        - This method will return nothing.    
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import sqlite3
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Include explanatory comments and the code output in your response, and do not include example usage or test cases in this code.
