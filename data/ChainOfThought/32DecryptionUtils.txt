a. Understand the Overall Purpose:
    - The DecryptionUtils is a class that provides methods for decryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initializes the decryption utility ( __init__)
        - Deciphers the given ciphertext using the Caesar cipher (caesar_decipher)
        - Deciphers the given ciphertext using the Vigenere cipher (vigenere_decipher)
        - Deciphers the given ciphertext using the Rail Fence cipher (rail_fence_decipher)
c. Detail each method:
    - __init__(self, key):
        - This method will act as the constructor. 
        - This method will initialize the decryption utility with a key.
        - Method will accept "key" as str which is The key to use for decryption.
        - self.key = key
    - caesar_decipher(self, ciphertext, shift):
        - This method will decipher the given ciphertext using the Caesar cipher
        - This method will get "ciphertext" as str which is the ciphertext to decipher, "shift" as int which is the shift to use for decryption.
        - This method will return the deciphered plaintext as str.
        - Example Usages:
        - >>>d = DecryptionUtils('key')
        - >>> d.caesar_decipher('ifmmp', 1)
        - >>> The expected return value for example usage is :  'hello'
    - vigenere_decipher(self, ciphertext):
        - This method will decipher the given ciphertext using the Vigenere cipher.
        - This method will get "ciphertext" as str which is the ciphertext to decipher.
        - This method will return The deciphered plaintext as str.
        - Example Usages:
        - >>> d = DecryptionUtils('key')
        - >>> d.vigenere_decipher('ifmmp')
        - >>> The expected return value for example usage is : 'ybocl'
     - rail_fence_decipher(self, encrypted_text, rails):
        - This method will deciphers the given ciphertext using the Rail Fence cipher.
        - This method will get "encrypted_text" as str which is the ciphertext to decipher, "rails" as int which is the number of rails to use for decryption.
        - This method will return The deciphered plaintext as str.
        - Example Usages:
        - >>>  d = DecryptionUtils('key')
        - d.rail_fence_decipher('Hoo!el,Wrdl l', 3)
        - >>> The expected return value for example usage is : Hello, World!'
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 
