a. Understand the Overall Purpose:
    - The ArgumentParser class can parse command line arguments to a dictionary.
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Parse the given command line argument (parse_arguments)
        - Retrieve the value of the argument (get_argument)
        - Adds an argument to self.types and self.required (add_argument)
        - Convert the command input (convert_type)
c. Detail each method:
    -__init__(self):
        - This method will act as the constructor. 
        - This method will initialize the fields as following: self.arguments is a dict that stores the args in a command line, self.requried is a set that stores the required arguments, and self.types is a dict that stores type of every arguments.
        - self.arguments = {}
        - self.required = set()
        - self.types = {}
        - Example Usage:
        - >>> parser.arguments
        {'key1': 'value1', 'option1': True}
        - >>> parser.required
        {'arg1'}
        - >>> parser.types
        {'arg1': 'type1'}

    -parse_arguments(self, command_string):
        - This method will parse the given command line argument string and invoke _convert_type to stores the parsed result in specific type in the arguments dictionary.
        - This method will get "command_string" as str, which is the command line argument string, formatted like "python script.py --arg1=value1 -arg2 value2 --option1 -option2".
        - This method will return tuple: (True, None) if parsing is successful, (False, missing_args) if parsing fails, where missing_args is a set of the missing argument names which are str.
        - Example Usage: 
        - >>> parser.parse_arguments("python script.py --arg1=value1 -arg2 value2 --option1 -option2")
        - The expected return value for example usage is : (True, None)
        - >>> parser.arguments
        {'arg1': 'value1', 'arg2': 'value2', 'option1': True, 'option2': True}
    -get_argument(self, key):
        - This method Retrieves the value of the specified argument from the arguments dictionary and returns it.
        - This Method will get the "param key" as a string which is the argument name
        - This method will return The value of the argument, or None if the argument does not exist.
        - Example Usage:
        - >>> parser.arguments
        {'arg1': 'value1', 'arg2': 'value2', 'option1': True, 'option2': True}
        - >>> parser.get_argument('arg2')
        - The expected return value for example usage is : ('value2')
        - >>> zfp.extract_all("result/aaa")
    - add_argument(self, arg, required=False, arg_type=str):
        - This method adds an argument to self.types and self.required. Check if it is a required argument and store the argument type. If the argument is set as required, it will be added to the required set. The argument type and name are stored in the types dictionary as key-value pairs.
        - This Method will get the "arg" as a string which is the argument name, "required" as bool, whether the argument is required and default value is "False", "arg_type" as str which is the Argument type and default value is "str".
        - Example Usage:
        - >>> parser.add_argument('arg1', True, 'int')
        - >>> parser.required
         {'arg1'}
        - >>> parser.types
         {'arg1': 'int'}
    _convert_type(self, arg, value):
        - This method Try to convert the type of input value by searching in self.types.
        - This Method will get the "value" as a string which is the input value in command line
        - This method will return corresponding value in self.types if convert successfully, or the input value otherwise
        - Example Usage: 
        - >>> parser.types
        - The expected return value for example usage is : {'arg1': int}
        - >>> parser._convert_type('arg1', '21')
        - The expected return value for example usage is : 21
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Include only explanatory comments and the code output in your response, and do not include example usage or test cases in this code.