System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The DiscountStrategy is a class that asupports using different discount strategies based on shopping credit or the shopping cart in the supermarket.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initialize the DiscountStrategy (__init__)
        - Calculate the total cost (total)
        - Calculate the final amount to be paid (due)
        - Calculate the discount based on the fidelity points (FidelityPromo)
        - Calculate the discount based on bulk item quantity (BulkItemPromo)
        - Calculate the discount based on the number of different products (LargeOrderPromo)
c. Detail each method:
    - __init__(self, customer, cart, promotion=None):
        - This method will act as the constructor. 
        - This method will iInitialize the DiscountStrategy with customer information, a cart of items, and an optional promotion.
        - This mMethod will accept "customer" as dict which is the customer information, "cart" as list of dicts which is a cart of items with details, "promotion" as a function which is optional promotion applied to the order.
        - Example Usages:
        - >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        - >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        - >>> DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)
        - self.customer = customer
        - self.cart = cart
        - self.promotion = promotion
        - self.total()
    - total(self):
        - This method will  Calculate the total cost of items in the cart.
        - This method will return the total cost of items as float.
        - Example Usages:
        - >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        - >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        - >>> ds = DiscountStrategy(customer, cart)
        - >>> ds.total()
        - >>> The expected return value for example usage is :  329.0
    - due(self):
        - This method will Calculate the final amount to be paid after applying the discount.
        - This method will return the final amount to be paid as float.
        - Example Usages:
        - >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        - >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        - >>> ds = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)
        - >>> ds.due()
        - >>> The expected return value for example usage is : 312.55    
    - @staticmethod FidelityPromo(order):
        - This method will Calculate the discount based on the fidelity points of the customer.Customers with over 1000 points can enjoy a 5% discount on the entire order.
        - This method will get "order" as object which is the order to apply the discount to.
        - This method will return the discount amount as float.
        - Example Usages:
        - >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        - >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        - >>> order = DiscountStrategy(customer, cart, DiscountStrategy.FidelityPromo)
        - >>> DiscountStrategy.FidelityPromo(order)
        - >>> The expected return value for example usage is : 16.45
    - @staticmethod BulkItemPromo(order):
        - This method will Calculate the discount based on bulk item quantity in the order.In the same order, if the quantity of a single item reaches 20 or more, each item will enjoy a 10% discount.
        - This method will get "order" as object which is the order to apply the discount to.
        - This method will return the discount amount as float.
        - Example Usages:
        - >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        - >>> cart = [{'product': 'product', 'quantity': 20, 'price': 23.5}]
        - >>> order = DiscountStrategy(customer, cart, DiscountStrategy.BulkItemPromo)
        - >>> DiscountStrategy.BulkItemPromo(order)
        - >>> The expected return value for example usage is : 47.0 
    - @staticmethod LargeOrderPromo(order):
        - This method will Calculate the discount based on the number of different products in the order. If the quantity of different products in the order reaches 10 or more, the entire order will enjoy a 7% discount.
        - This method will get "order" as object which is the order to apply the discount to.
        - This method will return the discount amount as float.
        - Example Usages:
        - >>> customer = {'name': 'John Doe', 'fidelity': 1200}
        - >>> cart = [{'product': 'product', 'quantity': 14, 'price': 23.5}]
        - >>> order = DiscountStrategy(customer, cart, DiscountStrategy.LargeOrderPromo)
        - >>> DiscountStrategy.LargeOrderPromo(order)
        - >>> The expected return value for example usage is : 0.0  
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
