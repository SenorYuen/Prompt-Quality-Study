System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The ExpressionCalculator is a class in Python that can perform calculations with basic arithmetic operations, including addition, subtraction, multiplication, division, and modulo.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initialize the expression calculator (__init__)
        - Calculate the result of the expression (calculate)
        - Prepare the infix expression ( prepare)
        - Check if a character is an operator (is_operator)
        - Compare the precedence of two operators (compare)
        - Perform the mathematical calculation (_calculate)
        - Transform the infix expression (transform)
c. Detail each method:
    - __init__(self):
        - This method will act as the constructor. 
        - This method will initialize the expression calculator.
        - self.postfix_stack = deque()
        - self.operat_priority = [0, 3, 2, 1, -1, 1, 0, 2]
    - calculate(self, expression):
        - This method will calculate the result of the given postfix expression.
        - This method will get "expression" as str which is the postfix expression to be calculated.
        - This method will return the calculated result as float.
        - Example Usage:
        - >>>expression_calculator = ExpressionCalculator()
        - >>> expression_calculator.calculate("2 + 3 * 4")
        - >>> The expected return value for example usage is : 14.0
    - prepare(self, expression):
        - This method will prepare the infix expression for conversion to postfix notation.
        - This method will get "expression" as str which is the postfix expression to be prepared.
        - Example Usage:
        - >>> expression_calculator = ExpressionCalculator()
        - >>> expression_calculator.prepare("2+3*4")
        - >>> The expected output value for example usage is : expression_calculator.postfix_stack = ['2', '3', '4', '*', '+']
    - @staticmethod is_operator(c):
        - This method will check if a character is an operator in {'+', '-', '*', '/', '(', ')', '%'}
        - This method will get "c" as str which is the character to be checked.
        - This method will return True if the character is an operator, False otherwise.
        - Example Usage:
        - >>>  expression_calculator = ExpressionCalculator()
        - >>> expression_calculator.is_operator("+")
        - >>> The expected return value for example usage is : True
    - compare(self, cur, peek): 
        - This method will compare the precedence of two operators.
        - This method will get "cur" as str which is the current operator, "peek" as str which is the operator at the top of the operator stack.
        - This method will return True if the current operator has higher or equal precedence, False otherwise.
        - Example Usage:
        - >>> expression_calculator = ExpressionCalculator()
        - >>> expression_calculator.compare("+", "-")
        - >>> The expected return value for example usage is : True 
    -  @staticmethod _calculate(first_value, second_value, current_op): 
        - This method will Perform the mathematical calculation based on the given operands and operator.
        - This method will get "first_value" as str which is the first operand, "second_value" as str which is the second operand, "current_op" as str which is the operator.
        - This method will return the calculated result as float.
        - Example Usage:
        - >>> expression_calculator = ExpressionCalculator()
        - >>> expression_calculator._calculate("2", "3", "+")
        - >>> The expected return value for example usage is : 5.0  
    -  @staticmethod transform(expression):
        - This method will transform the infix expression to a format suitable for conversion.
        - This method will get "expression" as str which is the infix expression to be transformed.
        - This method will return the transformed expression as str.
        - Example Usage:
        - >>> expression_calculator = ExpressionCalculator()
        - >>> expression_calculator.transform("2 + 3 * 4")
        - >>> The expected return value for example usage is :  "2+3*4" 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import re
    - from collections import deque
    - from decimal import Decimal
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code.

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
