System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The ImageProcessor is a class to process images, including loading, saving, resizing, rotating, and adjusting the brightness of images.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initialize self.image (__init__)
        - Use to open an image (load_image)
        - Save image (save_image)
        - Resize the image (resize_imager)
        - rotate image (rotate_image)
        - Adjust the brightness of image (adjust_brightness)
c. Detail each method:
    - __init__(self):
        - This method will act as the constructor. 
        - This method will initialize self.image.
        - self.image = None
    - load_image(self, image_path):
        - This method will Use Image util in PIL to open a image
        - This method will get "image_path" as str which is the path of the image which is going to be loaded.
        - Example Usage:
        - >>> processor.load_image('test.jpg')
        - >>> processor.image
        - >>> The expected return value for example usage is : <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=3072x4096 at 0x194F2412A48>
    - save_image(self, save_path):
        - This method will Save image to a path if image has opened.
        - This method will get "save_path" as str which is the path that the image will be saved.
        - Example Usage:
        - >>> processor.load_image('test.jpg')
        - >>> processor.save_image('test2.jpg') 
    - resize_image(self, width, height):
        - This method will resize the image if image has been opened.
        - This method will get "width" as int which is the target width of image, "height" as int which is the target height of image.
        - Example Usage:
        - >>> processor.load_image('test.jpg')
        - >>> processor.resize_image(300, 300)
        - >>> processor.image.width 
        - >>> The expected output value for example usage is : 300
        - >>> processor.image.height
        - >>> The expected output value for example usage is : 300
    - rotate_image(self, degrees):
        - This method will rotate the image if the image has opened. 
        - This method will get "degrees" as float which is the degrees that the image will be rotated.
        - Example Usage:
        - >>> processor.load_image('test.jpg')
        - >>> processor.resize_image(90)  
    - adjust_brightness(self, factor):
        - This method will adjust the brightness of the image if the image has opened.
        - This method will get "factor" as float , which is the brightness of an image. A factor of 0.0 gives a black image. A factor of 1.0 gives the original image.
        - Example Usage:
        -  >>> processor.load_image('test.jpg')
        - >>> processor.adjust_brightness(0.5) 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    -from PIL import Image, ImageEnhance, ImageChops
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
