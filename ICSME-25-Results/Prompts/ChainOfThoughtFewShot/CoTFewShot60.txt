System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The NumberConverter is a class that allows conversions of decimal to binary, octal and hexadecimal respectively and contrarily.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Convert a number from decimal to binary (decimal_to_binary)
        - Convert a number from binary to decimal (binary_to_decimal)
        - Convert a number from decimal to octal (decimal_to_octal)
        - Convert a number from octal to decimal (octal_to_decimal)
        - Convert a number from decimal to hexadecimal (decimal_to_hex)
        - Convert a number from hexadecimal to decimal (hex_to_decimal)
c. Detail each method:
    - @staticmethod decimal_to_binary(decimal_num):
        - This method will convert a number from decimal format to binary format.
        - This method will get "decimal_num" as int which is a decimal number.
        - This method will return the binary representation of an integer as str.
        - Example Usage:
        - >>> NumberConverter.decimal_to_binary(42423)
        - >>> The expected return value for example usage is : '1010010110110111'
    - @staticmethod binary_to_decimal(binary_num):
        - This method will convert a number from binary format to decimal format.
        - This method will get "binary_num" as str which is a binary number.
        This method will return the decimal representation of the binary number as int.
        - Example Usage:
        - >>> NumberConverter.binary_to_decimal('1010010110110111')
        - >>> The expected return value for example usage is : 42423
    - @staticmethod decimal_to_octal(decimal_num):
        - This method will convert a number from decimal format to octal format.
        - This method will get "decimal_num" as int which is a binary number.
        - This method will return the octal representation of an integer as str.
        - Example Usage:
        - >>> NumberConverter.decimal_to_octal(42423)
        - >>> The expected return value for example usage is : '122667'
    - @staticmethod octal_to_decimal(octal_num):
        - This method will convert a number from decimal format to octal format.
        - This method will get "octal_num" as str which is an octal number.
        - This method will return the decimal representation of the octal number as int.
        - Example Usage:
        - >>> NumberConverter.octal_to_decimal('122667')
        - >>> The expected return value for example usage is : 42423
    - @staticmethod decimal_to_hex(decimal_num):
        - This method will convert a number from decimal format to hex format.
        - This method will get "decimal_num" as int which is a decimal number.
        - This method will return the hex representation of a decimal as str.
        - Example Usage:
        - >>> NumberConverter.decimal_to_hex(42423)
        - >>> The expected return value for example usage is : 'a5b7'
    - @staticmethod hex_to_decimal(hex_num):
        - This method will Convert a number from hex format to decimal format.
        - This method will get "hex_num" as str which is a hex number.
        - This method will return the decimal representation of the hex number as int.
        - Example Usage:
        - >>> NumberConverter.hex_to_decimal('a5b7')
        - >>> The expected return value for example usage is : 42423  
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Include explanatory comments and the code output in your response, and do not include example usage or test cases in this code.

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
