System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The MusicPlayer is a class as a music player that provides to play, stop, add songs, remove songs, set volume, shuffle, and switch to the next or previous song.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initializes the music player with an empty playlist (__init__)
        - Adds a song to the playlist (add_song)
        - Removes a song from the playlist (remove_song)
        - Plays the current song (stop)
        - Stops the current song (delete_ticket)
        - Switches to the next song (switch_song)
        - Switches to the previous song (previous_song)
        - Sets the volume of the music player (set_volume)
        - Shuffles the playlist (shuffle)
c. Detail each method:
    - __init__(self):
        - This method will act as the constructor.
        - This method will Initialize the music player with an empty playlist, no current song, and a default volume of 50.
        - self.playlist = []
        - self.current_song = None
        - self.volume = 50
    - add_song(self, song):
        - This method will add a song to the playlist.
        - This method will get "song" as str which is the song to add to the playlist.
        - Example Usage:
        - >>> musicPlayer = MusicPlayer()
        - >>> musicPlayer.add_song("song1")
        - >>> musicPlayer.playlist
        - >>> The expected output value for example usage is : ['song1']
    - remove_song(self, song):
        - This method will remove a song from the playlist.
        - This method will get "song" as str which is the song to remove from the playlist.
        - Example Usage:
        - >>>musicPlayer = MusicPlayer()
        - >>> musicPlayer.playlist = ["song1", "song2"]
        - >>> musicPlayer.remove_song("song1")
        - >>> musicPlayer.playlist
        - >>> The expected output value for example usage is : ['song2'] 
    - play(self):
        - This method will Play the current song in the playlist.
        - This method will return the current song in the playlist, or False if there is no current song.
        - Example Usage:
        - >>>musicPlayer = MusicPlayer()
        - >>> musicPlayer.playlist = ["song1", "song2"]
        - >>> musicPlayer.current_song = "song1"
        - >>> musicPlayer.play()
        - >>> The expected return value for example usage is : ['song1'] 
    - stop(self):
        - This method will stop the current song in the playlist.
        - This method will return True if the current song was stopped, False if there was no current song.
        - Example Usage:
        - >>>musicPlayer = MusicPlayer()
        - >>> musicPlayer.playlist = ["song1", "song2"]
        - >>> musicPlayer.current_song = "song1"
        - >>> musicPlayer.stop()
        - >>> The expected return value for example usage is : True
    - switch_song(self):
        - This method will switch to the next song in the playlist.
        - This method will return True if the next song was switched to, False if there was no next song.
        - Example Usage:
        - >>>musicPlayer = MusicPlayer()
        - >>> musicPlayer.playlist = ["song1", "song2"]
        - >>> musicPlayer.current_song = "song1"
        - >>> musicPlayer.switch_song()
        - >>> The expected return value for example usage is : True
    - previous_song(self):
        - This method will switch to the previous song in the playlist.
        - This method will return True if the previous song was switched to, False if there was no previous song.
        - Example Usage:
        - >>>musicPlayer = MusicPlayer()
        - >>> musicPlayer.playlist = ["song1", "song2"]
        - >>> musicPlayer.current_song = "song2"
        - >>> musicPlayer.previous_song()
        - >>> The expected return value for example usage is : True    
    - set_volume(self, volume):
        - This method will set the volume of the music player, if the volume is between 0 and 100 is valid.
        - This method will get "volume" as int which is The volume to set the music player to.
        - This method will return True if the volume was set, False if the volume was invalid.
        - Example Usage:
        - >>> musicPlayer = MusicPlayer()
        - >>> musicPlayer.set_volume(50)
        - >>> musicPlayer.volume
        - >>> The expected return value for example usage is: 50  
    - shuffle(self):
        - This method will shuffle the playlist.
        - This method will return True if the playlist was shuffled, False if the playlist was empty.
        - Example Usage:
        - >>> musicPlayer = MusicPlayer()
        - >>> musicPlayer.playlist = ["song1", "song2"]
        - >>> musicPlayer.shuffle()
        - >>> The expected return value for example usage is: True
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    -  No import
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Include explanatory comments and the code output in your response, and do not include example usage or test cases in this code.   

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
