System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The SignInSystem is a class that acts as a sign in system, including adding users, signing in/out, checking sign-in status, and retrieving signed-in/not signed-in users.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initialize the sign-in system (__init__)
        - Add a user to the sign-in system (add_user)
        - Sign in a user (sign_in)
        - Check if a user is signed in (check_sign_in)
        - Check if all users are signed in (all_signed_in)
        - Get a list of usernames that are not signed in (all_not_signed_in)
c. Detail each method:
    - __init__(self):
        - This method will act as the constructor.
        - This method will initialize the sign-in system.
        - self.users = {}
    - add_user(self, username):
        - This method will add a user to the sign-in system if the user wasn't in the self.users.
        - This method will get "username" as str which is the username to be added.
        - This method will return True if the user is added successfully, False if the user already exists.
        - Example Usage: 
        - >>> signInSystem.add_user("mike")
        - >>> The expected return value for example usage is : True
        - >>> signInSystem.add_user("mike")
        - >>> The expected return value for example usage is : False
    - sign_in(self, username):
        - This method will sign in a user if the user is in the self.users and change the state to True.
        - This method will get "username" as str which is the username to be signed in.
        - This method will return True if the user is signed in successfully, False if the user does not exist.
        - Example Usage: 
        - >>> signInSystem.sign_in("mike")
        - >>> The expected return value for example usage is : True
        - >>> signInSystem.sign_in("mik")
        - >>> The expected return value for example usage is : False  
    - check_sign_in(self, username):
        - This method will check if a user is signed in.
        - This method will get "username" as str which is the username to be checked.
        - This method will return True if the user is signed in, False if the user does not exist or is not signed in.
        - Example Usage: 
        - >>> signInSystem.check_sign_in("jack")
        - >>> The expected return value for example usage is : False
        - >>> signInSystem.add_user("jack")
        - >>> signInSystem.check_sign_in("jack")
        - >>> signInSystem.sign_in("jack")
        - >>> signInSystem.check_sign_in("jack")
        - >>> The expected return value for example usage is : True 
    - all_signed_in(self):
        - This method will check if all users are signed in.
        - This method will return True if all users are signed in, False otherwise.
        - Example Usage: 
        - >>> signInSystem.add_user("jack")
        - >>> The expected return value for example usage is : True
        - >>> signInSystem.sign_in("jack")
        - >>> The expected return value for example usage is : True
    - all_not_signed_in(self):
        - This method will get a list of usernames that are not signed in.
        - This method will return a list of usernames that are not signed in as list[str].
        - Example Usage: 
        - >>> signInSystem = SignInSystem()
        - >>> signInSystem.add_user("a")
        - >>> The expected return value for example usage is : True
        - >>> signInSystem.add_user("b")
        - >>> The expected return value for example usage is : True
        - >>> signInSystem.all_not_signed_in()
        - >>> The expected return value for example usage is : ['a', 'b']
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import 
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code.           

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
