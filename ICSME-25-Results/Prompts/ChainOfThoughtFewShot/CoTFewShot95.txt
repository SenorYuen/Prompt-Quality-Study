System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The WeatherSystem is a class representing a weather system that provides functionality to query weather information for a specific city and convert temperature units between Celsius and Fahrenheit.
    - To ensure the function of this class, it will need all of these methods:
        - Initialize the weather system with a city name (__init__)
        - Query the weather system for the weather and temperature (query)
        - Set the city of the weather system (set_city)
        - Convert the temperature from Celsius to Fahrenheit (celsius_to_fahrenheit)
        - Convert the temperature from Fahrenheit to Celsius (fahrenheit_to_celsius)
c. Detail each method:
    - __init__(self, city) -> None:
        - This method will act as the constructor.
        - This method will initialize the weather system with a city name.
        - self.temperature = None
        - self.weather = None
        - self.city = city
        - self.weather_list = {}
    - query(self, weather_list, tmp_units = 'celsius'):
        - This method will query the weather system for the weather and temperature of the city,and convert the temperature units based on the input parameter.
        - This method will get "weather_list" as dict which is a dictionary of weather information for different cities, "tmp_units" as str which is the temperature units to convert to.
        - This method will return the temperature and weather of the city as tuple.
        - Example Usage:
        - >>> weatherSystem = WeatherSystem('New York')
        - >>> weather_list = {'New York': {'weather': 'sunny','temperature': 27,'temperature units': 'celsius'},'Beijing': {'weather': 'cloudy','temperature': 23,'temperature units': 'celsius'}}
        - >>> weatherSystem.query(weather_list)
        - >>> The expected return value for example usage is: (27, 'sunny')
    - set_city(self, city):
        - This method will set the city of the weather system.
        - This method will get "city" as str which is the city to set.
        - This method will return None.
        - Example Usage:
        - >>> weatherSystem = WeatherSystem('New York')
        - >>> weatherSystem.set_city('Beijing')
        - >>> weatherSystem.city
        - >>> The expected output value for example usage is: 'Beijing'
    - celsius_to_fahrenheit(self):
        - This method will convert the temperature from Celsius to Fahrenheit.
        - This method will return the temperature in Fahrenheit as float.
        - Example Usage:
        - >>> weatherSystem = WeatherSystem('New York')
        - >>> weatherSystem.temperature = 27
        - >>> weatherSystem.celsius_to_fahrenheit()
        - >>> The expected return value for example usage is: 80.6
    - fahrenheit_to_celsius(self):
        - This method will convert the temperature from Fahrenheit to Celsius.
        - This method will return the temperature in Celsius as float.
        - Example Usage:
        - >>> weatherSystem = WeatherSystem('New York')
        - >>> weatherSystem.temperature = 80.6
        - >>> weatherSystem.fahrenheit_to_celsius()
        - >>> The expected return value for example usage is: 26.999999999999996
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import 
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code.       

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
