a. Understand the Overall Purpose:
    - The CamelCaseMap is a custom class that allows keys to be in camel case style by converting them from underscore style, which provides dictionary-like functionality.
b. Identify the Required Methods:    
    - To ensure the function of this class, it will need all of these methods:
        - Initialize data (__init__)
        - Add an event to the calendar (__getitem__)
        -  Set the value corresponding to the key ( __setitem__)
        - Delete the value corresponding to the key (__delitem__)
        - Return Iterable Objects (__iter__) 
        - Returns the length of the own data ( __len__)
        - convert key string into camel case ( _convert_key)
        - convert key string into camel case (_to_camel_case)
c. Detail each method:
    - __init__(self):
       - This method will act as the constructor. 
        - This method will Initialize data to an empty dictionary.
        - self._data = {}
    - __getitem__(self, key)  
        - This method will return the value corresponding to the key.
        - This method will accept "key" as str.
        - This method will return the value corresponding to the key as str.
        - Example Usage:
        - >>> camelize_map = CamelCaseMap()
        - >>> camelize_map['first_name'] = 'John'
        - >>> camelize_map.__getitem__('first_name')
        - >>> The expected return value for example usage is : 'John'
    - __setitem__(self, key, value):
        - This method will set the value corresponding to the key to the specified value. 
        - This method will accept "key" as str, "value" as str which is the specified value.
        - This method will return None.
        - Example Usage:
        - >>> camelize_map = CamelCaseMap()
        - >>> camelize_map['first_name'] = 'John'
        - >>> camelize_map.__setitem__('first_name', 'new name')
        - >>> The expected output value for example usage is : camelize_map['first_name'] = 'new name'
    - __delitem__(self, key):
        - This method will delete the value corresponding to the key
        - This method will accept "key" as str.
        - This method will return None.
        - Example Usage:
        - >>> camelize_map = CamelCaseMap()
        - >>> camelize_map['first_name'] = 'John'
        - >>> camelize_map.__delitem__('first_name')
        - >>> flag = 'first_name' in camelize_map
        - >>> The expected output value for example usage is : flag = False       
    - __iter__(self):
        - This method will return Iterable Objects with Own Data.
        - This method will return an iterator as dict. 
        - Example Usage:
        - >>> camelize_map = CamelCaseMap()
        - >>> camelize_map['first_name'] = 'John'
        - >>> camelize_map['last_name'] = 'Doe'
        - >>> camelize_map['age'] = 30
        - >>> camelize_map.__iter__()
        - >>> The expected return value for example usage is : <dict_keyiterator object at 0x0000026739977C20>  
    -  __len__(self):
        - This method will return the length of the own data.
        - This method will return the length of data as int.
        - Example Usage:
        - >>> camelize_map = CamelCaseMap()
        - >>> camelize_map['first_name'] = 'John'
        - >>> camelize_map['last_name'] = 'Doe'
        - >>> camelize_map['age'] = 30
        - >>> camelize_map.__len__()
        - >>> The expected return value for example usage is :  3  
    - _convert_key(self, key):
        - This method will  convert key string into camel case.
        - This method will accept "key" as str.
        - This method will return the converted key string as str.
        - Example Usage:
        - >>> camelize_map = CamelCaseMap()
        - >>> camelize_map._convert_key('first_name')
        - >>> The expected return value for example usage is : 'firstName'
     - @staticmethod _to_camel_case(key):
        - This method will convert key string into camel case.
        - This method will accept "key" as str.
        - This method will return the converted key string as str.
        - Example Usage:
        - >>> camelize_map = CamelCaseMap()
        - >>> camelize_map._convert_key('first_name')
        - >>> The expected return value for example usage is : 'firstName'
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 

