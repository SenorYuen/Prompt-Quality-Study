a. Understand the Overall Purpose:
    - The CurrencyConverter is a class for currency conversion, which supports converting amounts between different currencies, retrieving supported currencies, adding new currency rates, and updating existing currency rates.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initialize the exchange rate (__init__)
        - Convert the value of a given currency to another currency (convert)
        - Returns a list of supported currency  (get_supported_currencie)
        - Add a new supported currency  (add_currency_rate)
        - Update the exchange rate (update_currency_rate)
c. Detail each method:
    - __init__(self):
        - This method will act as the constructor. 
        - This method will initialize the exchange rate of the US dollar against various currencies.
        - self.rates = {
            'USD': 1.0,
            'EUR': 0.85,
            'GBP': 0.72,
            'JPY': 110.15,
            'CAD': 1.23,
            'AUD': 1.34,
            'CNY': 6.40,
        }
    - convert(self, amount, from_currency, to_currency):
        - This method will Convert the value of a given currency to another currency type.
        - This method will get "amount" as float which is the value of a given currency, "from_currency" as str which is the source currency type,  "to_currency" as str which is the target currency type.
        - This method will return the value converted to another currency type as float.
        - Example Usage:
        - >>> cc = CurrencyConverter()
        - >>> cc.convert(64, 'CNY','USD')
        - >>> The expected return value for example usage is : 10.0
    - get_supported_currencies(self):
        - This method will return a list of supported currency types. 
        - This method will return all supported currency types as a list. 
        - Example Usage:
        - cc = CurrencyConverter()
        - >>> cc.get_supported_currencies()
        - >>> The expected return value for example usage is : ['USD','EUR','GBP','JPY','CAD','AUD','CNY']  
    - convert(self, amount, from_currency, to_currency):
        - This method will Add a new supported currency type, return False if the currency type is already in the support list
        - This method will get "currency" as str which is currency type to be added, " rate" as float which is the exchange rate for this type of currency.
        - This method will return None If successful; if unsuccessful, returns False.
        - Example Usage:
        - >>>cc = CurrencyConverter()
        - >>> cc.add_currency_rate('KRW', 1308.84)
        - >>> The expected return value for example usage is : self.rates['KRW'] = 1308.84 
    - update_currency_rate(self, currency, new_rate):
        - This method will update the exchange rate for a certain currency.
        - This method will get "currency" as str which is currency type to be updated, "new_rate" as float which will be the new exchange rate for this type of currency.
        - This method will return None If successful; if unsuccessful, returns False.
        - Example Usage:
        - >cc = CurrencyConverter()
        - >>> cc.update_currency_rate('CNY', 7.18)
        - >>> The expected return value for example usage is : self.rates['CNY'] = 7.18  
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code
