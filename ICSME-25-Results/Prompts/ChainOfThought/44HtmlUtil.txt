a. Understand the Overall Purpose:
    - The HtmlUtil is a class as util for html, supporting for formatting and extracting code from HTML text, including cleaning up the text and converting certain elements into specific marks.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initialize a series of labels (__init__)
        - Replace consecutive line breaks with a single line break (__format_line_feed)
        - Get the html text without the code (format_line_html_text)
        - Extract codes from the html body (extract_code_from_html_text)
c. Detail each method:
    - __init__(self):
        - This method will act as the constructor. 
        - This method will initialize a series of labels.
        - self.SPACE_MARK = '-SPACE-'
        - self.JSON_MARK = '-JSON-'
        - self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'
        - self.URL_MARK = '-URL-'
        - self.NUMBER_MARK = '-NUMBER-'
        - self.TRACE_MARK = '-TRACE-'
        - self.COMMAND_MARK = '-COMMAND-'
        - self.COMMENT_MARK = '-COMMENT-'
        - self.CODE_MARK = '-CODE-'
    - @staticmethod __format_line_feed(text):
        - This method will Replace consecutive line breaks with a single line break
        - This method will get "text" as str which is a string with consecutive line breaks.
        - This method will return the replaced text with a single line break.
    - @staticmethod  format_line_html_text(self, html_text):
        - This method will get the html text without the code, and add the code tag -CODE- where the code is.
        - This method will get "html_text" as str which is an html code snippet.
        - This method will return a string.   
        - Example Usage:
        -  >>>htmlutil = HtmlUtil()
        - >>>htmlutil.format_line_html_text(<html>
            >>>  <body>
            >>>    <h1>Title</h1>
            >>>    <p>This is a paragraph.</p>
            >>>    <pre>print('Hello, world!')</pre>
            >>>    <p>Another paragraph.</p>
            >>>    <pre><code>for i in range(5):
            >>>    print(i)</code></pre>
            >>>    </body>
            >>>    </html>)
        - >>> The expected return value for example usage is : Title
            This is a paragraph.
            -CODE-
            Another paragraph.
            -CODE-
   - extract_code_from_html_text(self, html_text):
        - This method will extract codes from the html body.
        - This method will get "html_text" as str which is an html code snippet.
        - This method will return the list of code.  
        - Example Usage:
        -  >>>htmlutil = HtmlUtil()
        - >>>htmlutil.extract_code_from_html_text(<html>
            >>>  <body>
            >>>    <h1>Title</h1>
            >>>    <p>This is a paragraph.</p>
            >>>    <pre>print('Hello, world!')</pre>
            >>>    <p>Another paragraph.</p>
            >>>    <pre><code>for i in range(5):
            >>>    print(i)</code></pre>
            >>>    </body>
            >>>    </html>)
        - >>> The expected return value for example usage is : ["print('Hello, world!')", 'for i in range(5):\n                print(i)']
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import re
    - import string
    - import gensim
    - from bs4 import BeautifulSoup
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 
