a. Understand the Overall Purpose:
    - The EmailClient is a class that serves as an email client, implementing functions such as checking emails, determining whether there is sufficient space, and cleaning up space.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initializes the EmailClient class (__init__)
        - Sends an email (send_to)
        - Retrieves the first unread email (fetch)
        - Gets the total size of the emails (get_occupied_size)
        - Clears the email box by deleting the oldest emails  (clear_inbox)
c. Detail each method:
    - __init__(self, file_path):
        - This method will act as the constructor. 
        - This method will initialize the EmailClient class with the email address and the capacity of the email box.
        - This Method will get "addr" as str which is the email address, "capacity" as float which is the capacity of the email box.
        - self.addr = addr
        - self.capacity = capacity
        - self.inbox = []
    - send_to(self, recv, content, size):
        - This method will send an email to the given email address.
        - This method will get "recv" as str which is the email address of the receiver, "content" as str which is the content of the email, "size" as float which is the size of the email.
        - This method will return True if the email is sent successfully, False if the receiver's email box is full.
        - Example Usage:
        - >>> ender = EmailClient('sender@example.com', 100)
        - >>> receiver = EmailClient('receiver@example.com', 50)
        - >>> sender.send_to(receiver, 'Hello', 10)
        - >>> The expected return value for example usage is : True
        - >>> receiver.inbox
        - >>> The expected output value for example usage is : {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'unread'}
    - fetch(self):
        - This method will retrieve the first unread email in the email box and mark it as read.
        - This method will return The first unread email in the email box as dict.
        - Example Usage:
        - >>> sender = EmailClient('sender@example.com', 100)
        - >>> receiver = EmailClient('receiver@example.com', 50)
        - >>> receiver.inbox = [{'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'unread'}]
        - >>> receiver.fetch()
        - >>> The expected return value for example usage is : {'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': '2023-07-13 11:36:40', 'state': 'read'}
    - is_full_with_one_more_email(self, size):
        - This method will determine whether the email box is full after adding an email of the given size.
        - This method will get "size" as float which is the size of the email.
        - This method will return The first unread email in the email box as dict.True if the email box is full, False otherwise.
        - Example Usage:
        - >>> sender = EmailClient('sender@example.com', 100)
        - >>> receiver = EmailClient('receiver@example.com', 50)
        - >>> receiver.is_full_with_one_more_email(10)
        - >>> The expected return value for example usage is : False  
    - get_occupied_size(self):
        - This method will get the total size of the emails in the email box.
        - This method will return The total size of the emails in the email box as int.
        - Example Usage:
        - >>> sender = EmailClient('sender@example.com', 100)
        - >>> receiver = EmailClient('receiver@example.com', 50)
        - >>> sender.inbox = [{'sender': 'sender@example.com', 'receiver': 'receiver@example.com', 'content': 'Hello', 'size': 10, 'time': datetime.now, 'state': 'unread'}]
        - >>> sender.get_occupied_size()
        - >>> The expected return value for example usage is : 10
    - clear_inbox(self, size):
        - This method will clear the email box by deleting the oldest emails until the email box has enough space to accommodate the given size.
        - This method will get "size" as float which is the size of the email.
        - Example Usage:
        - >>> sender = EmailClient('sender@example.com', 100)
        - >>> receiver = EmailClient('receiver@example.com', 50)
        - >>> receiver.inbox = [{'size': 10},{'size': 20},{'size': 15}]
        - >>> receiver.clear_inbox(30)
        - >>> receiver.inbox
        - >>> The expected output value for example usage is : [{'size': 15}] 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - from datetime import datetime
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code.
