a. Understand the Overall Purpose:
    - The WeatherSystem is a class representing a weather system that provides functionality to query weather information for a specific city and convert temperature units between Celsius and Fahrenheit.
    - To ensure the function of this class, it will need all of these methods:
        - Initialize the weather system with a city name (__init__)
        - Query the weather system for the weather and temperature (query)
        - Set the city of the weather system (set_city)
        - Convert the temperature from Celsius to Fahrenheit (celsius_to_fahrenheit)
        - Convert the temperature from Fahrenheit to Celsius (fahrenheit_to_celsius)
c. Detail each method:
    - __init__(self, city) -> None:
        - This method will act as the constructor.
        - This method will initialize the weather system with a city name.
        - self.temperature = None
        - self.weather = None
        - self.city = city
        - self.weather_list = {}
    - query(self, weather_list, tmp_units = 'celsius'):
        - This method will query the weather system for the weather and temperature of the city,and convert the temperature units based on the input parameter.
        - This method will get "weather_list" as dict which is a dictionary of weather information for different cities, "tmp_units" as str which is the temperature units to convert to.
        - This method will return the temperature and weather of the city as tuple.
        - Example Usage:
        - >>> weatherSystem = WeatherSystem('New York')
        - >>> weather_list = {'New York': {'weather': 'sunny','temperature': 27,'temperature units': 'celsius'},'Beijing': {'weather': 'cloudy','temperature': 23,'temperature units': 'celsius'}}
        - >>> weatherSystem.query(weather_list)
        - >>> The expected return value for example usage is: (27, 'sunny')
    - set_city(self, city):
        - This method will set the city of the weather system.
        - This method will get "city" as str which is the city to set.
        - This method will return None.
        - Example Usage:
        - >>> weatherSystem = WeatherSystem('New York')
        - >>> weatherSystem.set_city('Beijing')
        - >>> weatherSystem.city
        - >>> The expected output value for example usage is: 'Beijing'
    - celsius_to_fahrenheit(self):
        - This method will convert the temperature from Celsius to Fahrenheit.
        - This method will return the temperature in Fahrenheit as float.
        - Example Usage:
        - >>> weatherSystem = WeatherSystem('New York')
        - >>> weatherSystem.temperature = 27
        - >>> weatherSystem.celsius_to_fahrenheit()
        - >>> The expected return value for example usage is: 80.6
    - fahrenheit_to_celsius(self):
        - This method will convert the temperature from Fahrenheit to Celsius.
        - This method will return the temperature in Celsius as float.
        - Example Usage:
        - >>> weatherSystem = WeatherSystem('New York')
        - >>> weatherSystem.temperature = 80.6
        - >>> weatherSystem.fahrenheit_to_celsius()
        - >>> The expected return value for example usage is: 26.999999999999996
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import 
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code.       
