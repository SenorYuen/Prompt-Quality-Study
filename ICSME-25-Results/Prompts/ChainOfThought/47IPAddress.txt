a. Understand the Overall Purpose:
    - The IPAddress is a class to process IP Address, including validating, getting the octets and obtaining the binary representation of a valid IP address.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initialize the IP address (__init__)
        - Judge whether the IP address is valid (is_valid)
        - Seperate the four decimal numbers constituting the IP address by "."  (get_octets)
        - Return the binary form of the IP address (get_binary)
c. Detail each method:
    - __init__(self, ip_address):
        - This method will act as the constructor. 
        - This method will initialize the IP address to the specified address.
        - The method will get "ip_address" as str. 
        - self.ip_address = ip_address
    -  is_valid(self):
        - This method will Judge whether the IP address is valid, that is, whether the IP address is composed of four Decimal digits separated by '.'. Each digit is greater than or equal to 0 and less than or equal to 255. 
        - The method will return True if the IP address is valid, otherwise returns false.
        - Example Usage:
        - >>> ipaddress = IPAddress("10.10.10.10")
        - >>> ipaddress.is_valid()
        - >>> The expected return value for example usage is : True
    -  get_octets(self):
        - If the IP address is valid, the list of four decimal numbers separated by "." constituting the IP address is returned; otherwise, an empty list is returned.
        - The method will return a list of four decimal numbers
        - Example Usage:
        - >>> ipaddress = IPAddress("10.10.10.10")
        - >>> ipaddress.get_octets()
        - >>> The expected return value for example usage is : ["10", "10", "10", "10"] 
    -  get_binary(self):
        - If the IP address is valid, return the binary form of the IP address; otherwise, return ''
        - The method will return a string. 
        - Example Usage:
        - >>> ipaddress = IPAddress("10.10.10.10")
        - >>> ipaddress.get_binary()
        - >>> The expected return value for example usage is : "00001010.00001010.00001010.00001010" 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 
