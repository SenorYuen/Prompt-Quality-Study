System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The MahjongConnect is a class that represents a game board for Mahjong Connect with features like creating the board, checking valid moves, finding paths, removing icons, and checking if the game is over.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - initialize the board size and the icon list (__init__)
        - create the game board with the given board size and icons (create_board)
        - check if the move of two icons is valid (is_valid_move)
        - check if there is a path between two icons (has_path)
        - remove the connected icons (remove_icons)
        - Check if the game is over (is_game_over)
c. Detail each method:
    -  __init__(self):
        - This method will act as the constructor.
        - This method will initialize the board size and the icon list, and create the game board.
        - This method will get "BOARD_SIZE" as a list of two integer numbers which represents the number of rows and columns of the game board, "ICONS" as a list of string which represents the icons.
        - Example Usage:
        - >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
            mc.BOARD_SIZE = [4, 4]
            mc.ICONS = ['a', 'b', 'c']
            mc.board = mc.create_board()
        - self.BOARD_SIZE = BOARD_SIZE
        - self.ICONS = ICONS
        - self.board = self.create_board()
    -  create_board(self):
        - This method will create the game board with the given board size and icons
        - The method will return 2-dimensional list, the game board
        - Example Usage:
        - mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
        - >>> mc.create_board()
       -  The expected return value of the sample usage is: mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
    - is_valid_move(self, pos1, pos2):
        - This method will check if the move of two icons is valid (i.e. positions are within the game board range, the two positions are not the same, the two positions have the same icon, and there is a valid path between the two positions).
        - This method will get "pos1" as tuple (x,y) which is the position of the first icon, "pos2" as tuple (x,y) which is the position of the second icon.
        - This method will return True or False representing whether the move of two icons is valid.
        - Example Usage:  
        - >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
            mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        - >>> mc.is_valid_move((0, 0), (1, 0))   
        - >>> The expected return value for example usage is :  True  
    -  has_path(self, pos1, pos2):
        - This method will check if there is a path between two icons.
        - This method will get "pos1" as tuple (x,y) which is the position of the first icon, "pos2" as tuple (x,y) which is the position of the second icon.
        - This method will return True or False representing whether there is a path between two icons.
        - Example Usage:  
        - >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
            mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        - >>> mc.has_path((0, 0), (1, 0))   
        - >>> The expected return value for example usage is : True   
    - remove_icons(self, pos1, pos2):
        - This method will remove the connected icons on the game board.
        - This method will get "pos1" as tuple (x,y) which is the position of the first icon, "pos2" as tuple (x,y) which is the position of the second icon.
        - This method will return Nothing.
        - Example Usage:  
        - >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])
            mc.board = [['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]
        - >>> mc.remove_icons((0, 0), (1, 0))
            mc.board = [[' ', 'b', 'c', 'a'],
                    [' ', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a'],
                    ['a', 'b', 'c', 'a']]   
    - is_game_over(self):
        - This method will check if the game is over (i.e., if there are no more icons on the game board).
        - This method will return True or False, representing whether the game is over.
        - Example Usage: 
        - >>> mc = MahjongConnect([4, 4] ['a', 'b', 'c'])
        - >>> mc.board = [[' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' '],
                [' ', ' ', ' ', ' ']]
        - >>> mc.is_game_over() 
        - >>> The expected return value for example usage is : True   
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import random
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Include explanatory comments and the code output in your response, and do not include example usage or test cases in this code.

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
