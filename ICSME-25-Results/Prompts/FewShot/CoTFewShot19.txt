System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The CurrencyConverter is a class for currency conversion, which supports converting amounts between different currencies, retrieving supported currencies, adding new currency rates, and updating existing currency rates.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initialize the exchange rate (__init__)
        - Convert the value of a given currency to another currency (convert)
        - Returns a list of supported currency  (get_supported_currencie)
        - Add a new supported currency  (add_currency_rate)
        - Update the exchange rate (update_currency_rate)
c. Detail each method:
    - __init__(self):
        - This method will act as the constructor. 
        - This method will initialize the exchange rate of the US dollar against various currencies.
        - self.rates = {
            'USD': 1.0,
            'EUR': 0.85,
            'GBP': 0.72,
            'JPY': 110.15,
            'CAD': 1.23,
            'AUD': 1.34,
            'CNY': 6.40,
        }
    - convert(self, amount, from_currency, to_currency):
        - This method will Convert the value of a given currency to another currency type.
        - This method will get "amount" as float which is the value of a given currency, "from_currency" as str which is the source currency type,  "to_currency" as str which is the target currency type.
        - This method will return the value converted to another currency type as float.
        - Example Usage:
        - >>> cc = CurrencyConverter()
        - >>> cc.convert(64, 'CNY','USD')
        - >>> The expected return value for example usage is : 10.0
    - get_supported_currencies(self):
        - This method will return a list of supported currency types. 
        - This method will return all supported currency types as a list. 
        - Example Usage:
        - cc = CurrencyConverter()
        - >>> cc.get_supported_currencies()
        - >>> The expected return value for example usage is : ['USD','EUR','GBP','JPY','CAD','AUD','CNY']  
    - convert(self, amount, from_currency, to_currency):
        - This method will Add a new supported currency type, return False if the currency type is already in the support list
        - This method will get "currency" as str which is currency type to be added, " rate" as float which is the exchange rate for this type of currency.
        - This method will return None If successful; if unsuccessful, returns False.
        - Example Usage:
        - >>>cc = CurrencyConverter()
        - >>> cc.add_currency_rate('KRW', 1308.84)
        - >>> The expected return value for example usage is : self.rates['KRW'] = 1308.84 
    - update_currency_rate(self, currency, new_rate):
        - This method will update the exchange rate for a certain currency.
        - This method will get "currency" as str which is currency type to be updated, "new_rate" as float which will be the new exchange rate for this type of currency.
        - This method will return None If successful; if unsuccessful, returns False.
        - Example Usage:
        - >cc = CurrencyConverter()
        - >>> cc.update_currency_rate('CNY', 7.18)
        - >>> The expected return value for example usage is : self.rates['CNY'] = 7.18  
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
