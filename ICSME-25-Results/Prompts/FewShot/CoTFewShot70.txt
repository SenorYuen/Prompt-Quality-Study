System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The RPGCharacter represents a role-playing game character, which supports attacking other characters, healing, gaining experience, level up, and checking if the character is alive.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initialize an RPG character object (__init__)
        - Attack another character (attack)
        - Heal the character (heal)
        - Gain experience points for the character (gain_exp)
        - Level up the character and return to zero experience points (level_up)
        - Check if player is alive (is_alive)
c. Detail each method:
    - __init__(self, name, hp, attack_power, defense, level=1):
        - This method will act as the constructor.
        - This method will initialize an RPG character object.
        - This method will get "name" as str which is the name of the character, "hp" as int which is the health points of the character, "attack_power" as int which is the attack power of the character, "defense" as int which is the defense points of the character, "level" as int which is the level of the character and Default is 1.
        - self.name = name
        - self.hp = hp
        - self.attack_power = attack_power
        - self.defense = defense
        - self.level = level
        - self.exp = 0
    - attack(self, other_character):
        - This method will attack another character. The damage caused needs to offset the defense value.
        - This method will get "other_character" as str which is the character being attacked.
        - Example Usage: 
        - >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        - >>> player_2 = RPGCharacter('player 2', 100, 7, 2)
        - >>> player_1.attack(player_2)
        - >>> player_2.hp  
        - >>> The expected output value for example usage is : 92
    - heal(self):
        - This method will heal the character with 10 hp and the max hp is 100.
        - This method will return the current health points after healing as int. 
        - Example Usage: 
        - >>>  player_1 = RPGCharacter('player 1', 93, 10, 3)
        - >>> player_1.heal() 
        - >>> The expected return value for example usage is : 100
    - gain_exp(self, amount):
        - This method will gain experience points for the character and level_up when the exp has reached the value that is 100 times the current level. The experience that overflows should be used to calculate the next level up until exhausts
        - This method will get "amount" as int which is the amount of experience points to gain.
        - Example Usage: 
        - >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        - >>> player_1.gain_exp(1100)
        - >>> player_1.exp
        - >>> The expected output value for example usage is : 100
        - >>> player_1.level
        - >>> The expected output value for example usage is : 5   
    - level_up(self):
        - This method will Level up the character and return to zero experience points, increase hp by 20 points, attack power and defense points by 5 points. max level is 100
        - This method will return tuple[int, int, int, int], the new level, health points, attack power, and defense points after leveling up.
        - Example Usage: 
        - >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        - >>> player_1.level_up()
        - >>> The expected return value for example usage is : (2, 120, 15, 8) 
    - is_alive(self):
        - This method will check if the player is alive.
        - This method will return True if the hp is larger than 0, or False otherwise.
        - Example Usage: 
        - >>> player_1 = RPGCharacter('player 1', 100, 10, 3)
        - >>> player_1.is_alive()
        - >>> The expected return value for example usage is : True
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import 
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code.         

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
