System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The ArgumentParser class can parse command line arguments to a dictionary.
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Parse the given command line argument (parse_arguments)
        - Retrieve the value of the argument (get_argument)
        - Adds an argument to self.types and self.required (add_argument)
        - Convert the command input (convert_type)
c. Detail each method:
    -__init__(self):
        - This method will act as the constructor. 
        - This method will initialize the fields as following: self.arguments is a dict that stores the args in a command line, self.requried is a set that stores the required arguments, and self.types is a dict that stores type of every arguments.
        - self.arguments = {}
        - self.required = set()
        - self.types = {}
        - Example Usage:
        - >>> parser.arguments
        {'key1': 'value1', 'option1': True}
        - >>> parser.required
        {'arg1'}
        - >>> parser.types
        {'arg1': 'type1'}

    -parse_arguments(self, command_string):
        - This method will parse the given command line argument string and invoke _convert_type to stores the parsed result in specific type in the arguments dictionary.
        - This method will get "command_string" as str, which is the command line argument string, formatted like "python script.py --arg1=value1 -arg2 value2 --option1 -option2".
        - This method will return tuple: (True, None) if parsing is successful, (False, missing_args) if parsing fails, where missing_args is a set of the missing argument names which are str.
        - Example Usage: 
        - >>> parser.parse_arguments("python script.py --arg1=value1 -arg2 value2 --option1 -option2")
        - The expected return value for example usage is : (True, None)
        - >>> parser.arguments
        {'arg1': 'value1', 'arg2': 'value2', 'option1': True, 'option2': True}
    -get_argument(self, key):
        - This method Retrieves the value of the specified argument from the arguments dictionary and returns it.
        - This Method will get the "param key" as a string which is the argument name
        - This method will return The value of the argument, or None if the argument does not exist.
        - Example Usage:
        - >>> parser.arguments
        {'arg1': 'value1', 'arg2': 'value2', 'option1': True, 'option2': True}
        - >>> parser.get_argument('arg2')
        - The expected return value for example usage is : ('value2')
        - >>> zfp.extract_all("result/aaa")
    - add_argument(self, arg, required=False, arg_type=str):
        - This method adds an argument to self.types and self.required. Check if it is a required argument and store the argument type. If the argument is set as required, it will be added to the required set. The argument type and name are stored in the types dictionary as key-value pairs.
        - This Method will get the "arg" as a string which is the argument name, "required" as bool, whether the argument is required and default value is "False", "arg_type" as str which is the Argument type and default value is "str".
        - Example Usage:
        - >>> parser.add_argument('arg1', True, 'int')
        - >>> parser.required
         {'arg1'}
        - >>> parser.types
         {'arg1': 'int'}
    _convert_type(self, arg, value):
        - This method Try to convert the type of input value by searching in self.types.
        - This Method will get the "value" as a string which is the input value in command line
        - This method will return corresponding value in self.types if convert successfully, or the input value otherwise
        - Example Usage: 
        - >>> parser.types
        - The expected return value for example usage is : {'arg1': int}
        - >>> parser._convert_type('arg1', '21')
        - The expected return value for example usage is : 21
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - No import
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Include only explanatory comments and the code output in your response, and do not include example usage or test cases in this code.
 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
