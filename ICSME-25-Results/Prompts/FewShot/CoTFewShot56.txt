System Prompt:
Provided are instructions for generating the code for a class. Please provide the only code in your response.

User Prompt:
a. Understand the Overall Purpose:
    - The MovieTicketDB is a class that supports movie database operations, which allows for inserting movie information, searching for movie information by name, and deleting movie information by name.
b. Identify the Required Methods:      
    - To ensure the function of this class, it will need all of these methods:
        - Initializes the MovieTicketDB object with the database name (__init__)
        - Creates a "tickets" table in the database (create_table)
        - Inserts a new ticket into the "tickets" table (insert_ticket)
        - Searches for tickets in the "tickets" table (search_tickets_by_customer)
        - Deletes a ticket from the "tickets" table  (delete_ticket)
c. Detail each method:
    - __init__(self, db_name):
        - This method will act as the constructor.
        - This method will Initialize the MovieTicketDB object with the specified database name.
        - This Method will get "db_name" as str which is the name of the SQLite database.
        - self.connection = sqlite3.connect(db_name)
        - self.cursor = self.connection.cursor()
        - self.create_table()
    - def create_table(self):
        - Creates a "tickets" table in the database if it does not exist already. Fields include ID of type int, movie name of type str, theater name of type str, seat number of type str, and customer name of type str. 
        - This method will return None.  
    - insert_ticket(self, movie_name, theater_name, seat_number, customer_name):
        - This method will Insert a new ticket into the "tickets" table.
        - This method will get "movie_name" as str which is the name of the movie, "theater_name" as str which is the name of the theater, "seat_number" as str which is the seat number, "customer_name" as str which is the name of the customer.
        - This method will return nothing.
    - search_tickets_by_customer(self, customer_name):
        - This method will Search for tickets in the "tickets" table by customer name.
        - This method will get "customer_name" as str which is the name of the customer.
        - This method will return a list of tuples, the rows from the "tickets" table that match the search criteria.
        - Example Usage:
        -  ticket_db = MovieTicketDB("ticket_database.db")
        - >>> ticket_db.create_table()
        - >>> ticket_db.insert_ticket("Movie A", "Theater 1", "A1", "John Doe")
        - >>> result = ticket_db.search_tickets_by_customer("John Doe")
        - >>> The expected output value for example usage is : len(result) = 1
    - delete_ticket(self, ticket_id):
        - This method will delete a ticket from the "tickets" table by ticket ID.
        - This method will get "ticket_id" as int which is the ID of the ticket to delete.
        - This method will return nothing.    
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import sqlite3
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Include explanatory comments and the code output in your response, and do not include example usage or test cases in this code.

 Use the following prompt and solution pair as context for generating the previously mentioned class: 
a. Understand the Overall Purpose:
    - The ZipFileProcessor class can read and decompress zip files. The ZipFileProcessor class also can compress a list of specified files into a zip file. 
b. Identify the Required Methods:
    - To ensure the function of this class, it will need all of these methods:
        - Initialize file name (__init__)
        - Read files (read_zip_file)
        - Extract all files (extract_all)
        - Extract a specific file identified by name (extract_file)
        - Compress files into zip (create_zip_file)
c. Detail each method:
    - __init__(self, file_name):
        - This method will act as the constructor.
        - This method will initialize the file name.
        - This Method will accept "file_name" as str ehich is the name of the file to be processed.
        - self.file_name = file_name
    - read_zip_file(self):
        - This method will get open file object, and return the open file object if successful; otherwise, returns None
        - Example Usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> file = zfp.read_zip_file()
    - extract_all(self, output_path):
        - This method will extract all zip files and place them in the specified path
        - This method will get the "output_path" as str which is the location of the extracted file.
        - This method will return True or False to represent if the extraction operation was successful. 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_all("result/aaa")
    - extract_file(self, file_name, output_path):  
        - This method will extract the file with the specified name from the zip file and place it in the specified path  
        - This method will get "file_name" as str whcih is the name of the file to be uncompressed, "output_path" as str which is the location of the extracted file. 
        - The method will return True or False, representing whether the extraction operation was successful
        - Example usage: 
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.extract_file("bbb.txt", "result/aaa")
    - create_zip_file(self, files, output_file_name):
        - This method will compress the specified file list into a zip file and place it in the specified path. 
        - This method will get "files" as a list of string which is the List of files to compress, "output_file_name" as str which specifies output path.
        - This method will return True or False, representing whether the compression operation was successful 
        - Example Usage:
        - >>> zfp = ZipFileProcessor("aaa.zip")
        - >>> zfp.create_zip_file(["bbb.txt", "ccc,txt", "ddd.txt"], "output/bcd") 
d. Plan the implementation:
    - For each method, consider the input parameters, the actions that must be performed, and the expected outcome. 
e. Import statements:
    - import zipfile
f. Implement the methods:
    - Write the code for each method step-by-step, following this outlined plan. Please only include the code output in your response, and do not include example usage or test cases in this code. 


import zipfile


class ZipFileProcessor:
    def __init__(self, file_name):
        self.file_name = file_name

    def read_zip_file(self):
        try:
            zip_file = zipfile.ZipFile(self.file_name, 'r')
            return zip_file
        except:
            return None

    def extract_all(self, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extractall(output_path)
            return True
        except:
            return False

    def extract_file(self, file_name, output_path):
        try:
            with zipfile.ZipFile(self.file_name, 'r') as zip_file:
                zip_file.extract(file_name, output_path)
            return True
        except:
            return False

    def create_zip_file(self, files, output_file_name):
        try:
            with zipfile.ZipFile(output_file_name, 'w') as zip_file:
                for file in files:
                    zip_file.write(file)
            return True
        except:
            return False
